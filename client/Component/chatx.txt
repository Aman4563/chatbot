// Chat.tsx

import React, { useState, useRef, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { 
  Send, 
  Paperclip, 
  X, 
  FileText, 
  Image as ImageIcon, 
  File,
  Edit2,
  Check,
  XCircle,
  ChevronLeft,
  ChevronRight,
  RotateCcw
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { RootState } from '../store';
import { 
  setInput, 
  addMessage, 
  sendChatMessageStream,
  startEditingMessage,
  cancelEditingMessage,
  updateMessageText,
  navigateResponseVersion
} from '../chatSlice';
import type { FileData, Message } from '../chatSlice';

const Chat = () => {
  const dispatch = useDispatch();
  const { 
    conversations, 
    activeConversationId, 
    input, 
    isLoading, 
    error, 
    selectedModel,
    editingMessageId
  } = useSelector((state: RootState) => state.chat);

  const [attachedFiles, setAttachedFiles] = useState<FileData[]>([]);
  const [dragOver, setDragOver] = useState(false);
  const [editText, setEditText] = useState('');
  const [collapsedBlocks, setCollapsedBlocks] = useState<Set<string>>(new Set());
  
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const editInputRef = useRef<HTMLTextAreaElement>(null);

  const activeConversation = conversations.find(conv => conv.id === activeConversationId);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [activeConversation?.messages]);

  useEffect(() => {
    if (editingMessageId && editInputRef.current) {
      editInputRef.current.focus();
    }
  }, [editingMessageId]);

  // Handle message editing
  const handleStartEdit = (message: Message) => {
    setEditText(message.text);
    dispatch(startEditingMessage(message.id));
  };

  const handleCancelEdit = () => {
    setEditText('');
    dispatch(cancelEditingMessage());
  };

  const handleSaveEdit = (messageId: string) => {
    if (editText.trim() && editText !== activeConversation?.messages.find(m => m.id === messageId)?.text) {
      dispatch(updateMessageText({ messageId, newText: editText.trim() }));
      
      // Regenerate response for the edited message
      dispatch(sendChatMessageStream({ 
        message: editText.trim(), 
        files: activeConversation?.messages.find(m => m.id === messageId)?.files || [],
        isEdit: true,
        editedMessageId: messageId
      }));
    }
    setEditText('');
  };

  // Handle response navigation
  const handleNavigateResponse = (messageId: string, direction: 'prev' | 'next') => {
    dispatch(navigateResponseVersion({ messageId, direction }));
  };

  const handleSendMessage = async () => {
    if ((!input.trim() && attachedFiles.length === 0) || !activeConversationId || isLoading) {
      return;
    }

    const messageText = input.trim();
    const files = [...attachedFiles];

    // Clear input and files
    dispatch(setInput(''));
    setAttachedFiles([]);

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      sender: 'User',
      text: messageText,
      files: files,
      timestamp: new Date().toISOString(),
    };

    dispatch(addMessage({ conversationId: activeConversationId, message: userMessage }));

    // Send to API
    try {
      await dispatch(sendChatMessageStream({ message: messageText, files })).unwrap();
    } catch (error) {
      console.error('Failed to send message:', error);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleEditKeyPress = (e: React.KeyboardEvent, messageId: string) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSaveEdit(messageId);
    } else if (e.key === 'Escape') {
      handleCancelEdit();
    }
  };

  // File handling functions (keeping your existing logic)
  const handleFileUpload = async (files: FileList | null) => {
    if (!files) return;

    const newFiles: FileData[] = [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      try {
        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('http://localhost:8000/file/upload', {
          method: 'POST',
          body: formData,
        });

        if (response.ok) {
          const uploadedFile = await response.json();
          const base64Data = uploadedFile.url.split(',')[1];
          
          newFiles.push({
            data: base64Data,
            mime_type: uploadedFile.mime_type,
            filename: uploadedFile.filename,
            url: uploadedFile.url
          });
        } else {
          throw new Error(`Failed to upload ${file.name}`);
        }
      } catch (error) {
        console.error(`Error uploading ${file.name}:`, error);
        alert(`Failed to upload ${file.name}. Please try again.`);
      }
    }

    setAttachedFiles(prev => [...prev, ...newFiles]);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
    handleFileUpload(e.dataTransfer.files);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setDragOver(false);
  };

  const removeAttachedFile = (index: number) => {
    setAttachedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const getFileIcon = (mimeType: string) => {
    if (mimeType.startsWith('image/')) return <ImageIcon className="w-4 h-4" />;
    if (mimeType.includes('pdf')) return <FileText className="w-4 h-4" />;
    return <File className="w-4 h-4" />;
  };

  const formatFileName = (filename: string, maxLength: number = 20) => {
    if (filename.length <= maxLength) return filename;
    const extension = filename.split('.').pop();
    const nameWithoutExtension = filename.slice(0, filename.lastIndexOf('.'));
    const truncatedName = nameWithoutExtension.slice(0, maxLength - extension!.length - 4);
    return `${truncatedName}...${extension}`;
  };

  const toggleCodeBlock = (blockId: string) => {
    setCollapsedBlocks(prev => {
      const newSet = new Set(prev);
      if (newSet.has(blockId)) {
        newSet.delete(blockId);
      } else {
        newSet.add(blockId);
      }
      return newSet;
    });
  };

  const renderFilePreview = (file: FileData) => {
    if (file.mime_type.startsWith('image/')) {
      return (
        <img 
          src={file.url} 
          alt={file.filename}
          className="max-w-xs max-h-48 rounded-lg object-cover border"
        />
      );
    }
    return (
      <div className="flex items-center space-x-2 p-3 bg-gray-100 rounded-lg border max-w-xs">
        {getFileIcon(file.mime_type)}
        <span className="text-sm text-gray-700 truncate">
          {formatFileName(file.filename, 25)}
        </span>
      </div>
    );
  };

  // Your existing code block component
  const CodeBlock = ({ className, children, ...props }: any) => {
    const code = String(children).replace(/\n$/, '');
    const language = className?.replace(/language-/, '') || 'text';
    const blockId = `code-${Math.random().toString(36).substr(2, 9)}`;
    const isCollapsed = collapsedBlocks.has(blockId);
    const lines = code.split('\n');
    const shouldShowCollapse = lines.length > 10;

    return (
      <div className="relative">
        {shouldShowCollapse && (
          <button
            onClick={() => toggleCodeBlock(blockId)}
            className="absolute right-2 top-2 z-10 px-2 py-1 text-xs bg-gray-700 text-white rounded hover:bg-gray-600"
          >
            {isCollapsed ? `Show all ${lines.length} lines` : 'Collapse'}
          </button>
        )}
        <SyntaxHighlighter
          style={tomorrow}
          language={language}
          PreTag="div"
          showLineNumbers={lines.length > 5}
          customStyle={{
            maxHeight: isCollapsed ? '200px' : 'none',
            overflow: isCollapsed ? 'hidden' : 'auto'
          }}
          {...props}
        >
          {isCollapsed ? lines.slice(0, 8).join('\n') + '\n...' : code}
        </SyntaxHighlighter>
      </div>
    );
  };

  // Enhanced message rendering with edit functionality
  const renderMessage = (msg: Message, index: number) => {
    const isUser = msg.sender === 'User';
    const isEditing = editingMessageId === msg.id;
    const isBot = msg.sender === 'Bot';
    const hasMultipleResponses = isBot && msg.responses && msg.responses.length > 1;
    const currentResponseIndex = msg.currentResponseIndex || 0;
    const totalResponses = msg.responses?.length || 1;

    return (
      <div key={msg.id} className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-6`}>
        <div className={`flex ${isUser ? 'flex-row-reverse' : 'flex-row'} items-start space-x-3 max-w-[80%]`}>
          {/* Avatar */}
          <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-white font-semibold ${isUser ? 'bg-blue-500' : 'bg-green-500'}`}>
            {isUser ? 'U' : 'B'}
          </div>
          
          {/* Message content */}
          <div className={`flex flex-col ${isUser ? 'items-end' : 'items-start'}`}>
            <div className={`rounded-lg px-4 py-3 ${isUser ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-800'} relative group`}>
              {/* Edit button for user messages */}
              {isUser && !isEditing && (
                <button
                  onClick={() => handleStartEdit(msg)}
                  className="absolute -right-8 top-1/2 transform -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded hover:bg-gray-200"
                  title="Edit message"
                >
                  <Edit2 className="w-4 h-4 text-gray-500" />
                </button>
              )}

              {/* Response navigation for bot messages */}
              {hasMultipleResponses && (
                <div className="absolute -left-12 top-1/2 transform -translate-y-1/2 flex flex-col space-y-1 opacity-0 group-hover:opacity-100 transition-opacity">
                  <button
                    onClick={() => handleNavigateResponse(msg.id, 'prev')}
                    disabled={currentResponseIndex === 0}
                    className="p-1 rounded hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    title="Previous response"
                  >
                    <ChevronLeft className="w-4 h-4 text-gray-500" />
                  </button>
                  <button
                    onClick={() => handleNavigateResponse(msg.id, 'next')}
                    disabled={currentResponseIndex === totalResponses - 1}
                    className="p-1 rounded hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    title="Next response"
                  >
                    <ChevronRight className="w-4 h-4 text-gray-500" />
                  </button>
                </div>
              )}

              {isEditing ? (
                // Edit mode
                <div className="min-w-64">
                  <textarea
                    ref={editInputRef}
                    value={editText}
                    onChange={(e) => setEditText(e.target.value)}
                    onKeyDown={(e) => handleEditKeyPress(e, msg.id)}
                    className="w-full p-2 border rounded resize-none text-black"
                    rows={3}
                    placeholder="Edit your message..."
                  />
                  <div className="flex justify-end space-x-2 mt-2">
                    <button
                      onClick={handleCancelEdit}
                      className="flex items-center space-x-1 px-3 py-1 text-sm bg-gray-500 text-white rounded hover:bg-gray-600"
                    >
                      <XCircle className="w-4 h-4" />
                      <span>Cancel</span>
                    </button>
                    <button
                      onClick={() => handleSaveEdit(msg.id)}
                      disabled={!editText.trim()}
                      className="flex items-center space-x-1 px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Check className="w-4 h-4" />
                      <span>Save & Send</span>
                    </button>
                  </div>
                </div>
              ) : (
                // Display mode - your existing message rendering logic
                <>
                  {isUser ? (
                    <div className="whitespace-pre-wrap break-words">
                      {msg.text}
                      {msg.isEdited && (
                        <span className="text-xs opacity-75 ml-2">(edited)</span>
                      )}
                    </div>
                  ) : (
                    <div className="prose prose-sm max-w-none">
                      <ReactMarkdown
                        components={{
                          code: ({ node, inline, className, children, ...props }) => {
                            const match = /language-(\w+)/.exec(className || '');
                            const code = String(children).replace(/\n$/, '');
                            const hasLang = !!match;
                            const isSingleLine = !code.includes('\n');

                            if (inline || (isSingleLine && !hasLang)) {
                              return <code className="bg-gray-200 px-1 py-0.5 rounded text-sm" {...props}>{children}</code>;
                            }

                            return <CodeBlock className={className} {...props}>{children}</CodeBlock>;
                          },
                          pre: ({ children }) => <>{children}</>,
                          p: ({ children, ...props }) => (
                            <p className="mb-3 leading-relaxed" {...props}>{children}</p>
                          ),
                          ul: ({ children, ...props }) => (
                            <ul className="list-disc list-inside mb-3 space-y-1" {...props}>{children}</ul>
                          ),
                          ol: ({ children, ...props }) => (
                            <ol className="list-decimal list-inside mb-3 space-y-1" {...props}>{children}</ol>
                          ),
                          li: ({ children, ...props }) => (
                            <li className="ml-2" {...props}>{children}</li>
                          ),
                          blockquote: ({ children, ...props }) => (
                            <blockquote className="border-l-4 border-gray-300 pl-4 italic mb-3" {...props}>{children}</blockquote>
                          ),
                          h1: ({ children, ...props }) => (
                            <h1 className="text-2xl font-bold mb-3" {...props}>{children}</h1>
                          ),
                          h2: ({ children, ...props }) => (
                            <h2 className="text-xl font-bold mb-2" {...props}>{children}</h2>
                          ),
                          h3: ({ children, ...props }) => (
                            <h3 className="text-lg font-bold mb-2" {...props}>{children}</h3>
                          ),
                          h4: ({ children, ...props }) => (
                            <h4 className="text-base font-bold mb-2" {...props}>{children}</h4>
                          ),
                          strong: ({ children, ...props }) => (
                            <strong className="font-bold" {...props}>{children}</strong>
                          ),
                          em: ({ children, ...props }) => (
                            <em className="italic" {...props}>{children}</em>
                          ),
                          table: ({ children, ...props }) => (
                            <table className="min-w-full border-collapse border border-gray-300 my-4" {...props}>{children}</table>
                          ),
                          th: ({ children, ...props }) => (
                            <th className="border border-gray-300 px-4 py-2 bg-gray-100 text-left font-semibold" {...props}>{children}</th>
                          ),
                          td: ({ children, ...props }) => (
                            <td className="border border-gray-300 px-4 py-2" {...props}>{children}</td>
                          ),
                          a: ({ href, children, ...props }) => (
                            <a href={href} className="text-blue-600 hover:text-blue-800 underline" target="_blank" rel="noopener noreferrer" {...props}>{children}</a>
                          ),
                        }}
                      >
                        {msg.text}
                      </ReactMarkdown>
                    </div>
                  )}
                </>
              )}

              {/* Response version indicator for bot messages */}
              {hasMultipleResponses && (
                <div className="text-xs text-gray-500 mt-2 flex items-center space-x-2">
                  <span>{currentResponseIndex + 1} of {totalResponses}</span>
                  <RotateCcw className="w-3 h-3" />
                </div>
              )}

              {/* Files */}
              {msg.files && msg.files.length > 0 && (
                <div className="mt-3 space-y-2">
                  {msg.files.map((file, fileIndex) => (
                    <div key={fileIndex}>
                      {renderFilePreview(file)}
                    </div>
                  ))}
                </div>
              )}

              {/* Streaming indicator */}
              {msg.isStreaming && (
                <div className="flex items-center space-x-1 mt-2">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-xs text-gray-500">Generating...</span>
                </div>
              )}
            </div>

            {/* Timestamp */}
            <div className="text-xs text-gray-500 mt-1">
              {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        </div>
      </div>
    );
  };

  if (!activeConversation) {
    return (
      <div className="flex-1 flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="text-6xl mb-4">💬</div>
          <h2 className="text-2xl font-semibold text-gray-600 mb-2">Welcome to AI Chat</h2>
          <p className="text-gray-500 mb-6">Create a new conversation to get started with our intelligent assistant</p>
          <div className="bg-white p-6 rounded-lg shadow-sm border max-w-md">
            <h3 className="font-medium text-gray-800 mb-3">Features:</h3>
            <ul className="text-sm text-gray-600 space-y-2">
              <li>• Multi-modal conversations</li>
              <li>• Document analysis (PDF, DOCX, CSV, JSON)</li>
              <li>• Image analysis and vision</li>
              <li>• Code generation and explanation</li>
              <li>• Message editing and response regeneration</li>
            </ul>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col bg-gray-50 relative">
      {/* Drag overlay */}
      {dragOver && (
        <div className="absolute inset-0 bg-blue-500 bg-opacity-20 border-4 border-dashed border-blue-500 flex items-center justify-center z-50 rounded-lg">
          <div className="text-center">
            <div className="text-4xl mb-4">📁</div>
            <div className="text-xl font-semibold text-blue-700">Drop files here to upload</div>
            <div className="text-blue-600">Images, documents, and more</div>
          </div>
        </div>
      )}

      {/* Messages */}
      <div 
        className="flex-1 overflow-y-auto p-6 space-y-4 custom-scrollbar"
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
      >
        {activeConversation.messages.map((msg, index) => renderMessage(msg, index))}
        <div ref={messagesEndRef} />
      </div>

      {/* Error display */}
      {error && (
        <div className="px-6 py-2">
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            <strong className="font-bold">Error: </strong>
            <span>{error}</span>
          </div>
        </div>
      )}

      {/* Attached files preview */}
      {attachedFiles.length > 0 && (
        <div className="px-6 py-2 bg-white border-t">
          <div className="flex flex-wrap gap-2">
            {attachedFiles.map((file, index) => (
              <div key={index} className="relative group">
                <div className="flex items-center space-x-2 bg-gray-100 rounded-lg px-3 py-2 text-sm">
                  {getFileIcon(file.mime_type)}
                  <span className="text-gray-700">{formatFileName(file.filename)}</span>
                  <button
                    onClick={() => removeAttachedFile(index)}
                    className="text-gray-400 hover:text-red-500 opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Input area */}
      <div className="p-6 bg-white border-t">
        <div className="flex items-end space-x-4">
          <button
            onClick={() => fileInputRef.current?.click()}
            className="flex-shrink-0 p-3 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
            title="Attach file"
          >
            <Paperclip className="w-5 h-5 text-gray-600" />
          </button>

          <div className="flex-1">
            <textarea
              value={input}
              onChange={(e) => dispatch(setInput(e.target.value))}
              onKeyDown={handleKeyPress}
              placeholder="Ask questions, share images, upload documents, or discuss any topic..."
              className="w-full p-4 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={1}
              style={{ 
                minHeight: '60px',
                maxHeight: '200px',
                height: 'auto',
                overflowY: input.split('\n').length > 3 ? 'auto' : 'hidden'
              }}
              onInput={(e) => {
                const target = e.target as HTMLTextAreaElement;
                target.style.height = 'auto';
                target.style.height = Math.min(target.scrollHeight, 200) + 'px';
              }}
            />
          </div>

          <button
            onClick={handleSendMessage}
            disabled={(!input.trim() && attachedFiles.length === 0) || isLoading}
            className="flex-shrink-0 p-3 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-lg transition-colors"
          >
            <Send className="w-5 h-5" />
          </button>
        </div>

        <div className="flex items-center justify-between mt-2 text-xs text-gray-500">
          <span>Powered by {selectedModel}</span>
          <span>Press Enter to send, Shift+Enter for new line</span>
        </div>
      </div>

      {/* Hidden file input */}
      <input
        ref={fileInputRef}
        type="file"
        multiple
        onChange={(e) => handleFileUpload(e.target.files)}
        className="hidden"
        accept="image/*,.pdf,.doc,.docx,.txt,.csv,.json,.md,.xml"
      />
    </div>
  );
};

export default Chat;
